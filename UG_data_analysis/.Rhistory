m_nonplan1 <- update(m2_3interaction2, .~. + scale(BIS_NONPLAN))
m_urgency1 <- update(m2_3interaction2, .~. + scale(urgency))
m_interpersonal1 <- update(m2_3interaction2, .~. + scale(IIP15INTAMBV))
summary(m_exit1)
# failed
#summary(m_education1)
#summary(m_income1)
#summary(m_mmse1)
#summary(m_nonplan1)
#summary(m_urgency1)
#summary(m_interpersonal1)
summary(m_exit1)
summary(m_education1)
summary(m_income1)
summary(m_mmse1)
summary(m_nonplan1)
summary(m_urgency1)
summary(m_interpersonal1)
summary(m_exit1)
summary(m_education1)
summary(m_income1)
summary(m_mmse1)
summary(m_nonplan1)
summary(m_nonplan1)
summary(m_urgency1)
summary(m_interpersonal1)
m5 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + (block|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
summary(m5)
m6 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score, level = 2, fitfunction = glmer.glmulti, random = "+ (block|ID)", method = "g", data = allData)
summary(m_education4)
m_education4 <- update(m2_2interaction2, .~. + scale(EDUCATION))
m_income4 <- update(m2_2interaction2, .~. + scale(IncomePerCapita))
m_exit4 <- update(m2_2interaction2, .~. + scale(EXIT))
m_mmse4 <- update(m2_2interaction2, .~. + scale(MMSE))
m_nonplan4 <- update(m2_2interaction2, .~. + scale(BIS_NONPLAN))
m_urgency4 <- update(m2_2interaction2, .~. + scale(urgency))
m_interpersonal4 <- update(m2_2interaction2, .~. + scale(IIP15INTAMBV))
summary(m_education4)
summary(m_income4)
summary(m_exit4)
summary(m_mmse4)
summary(m_nonplan4)
summary(m_urgency4)
summary(m_interpersonal4)
summary(m_education4)
summary(m_income4)
summary(m_exit4)
summary(m_mmse4)
summary(m_nonplan4)
summary(m_urgency4)
summary(m_interpersonal4)
m7 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + (block|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
m7_1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group5 + (block|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
summary(m7)
summary(m7_1)
m_education2 <- update(m7, .~. + scale(EDUCATION))
m_income2 <- update(m7, .~. + scale(IncomePerCapita))
m_exit2 <- update(m7, .~. + scale(EXIT))
m_mmse2 <- update(m7, .~. + scale(MMSE))
m_nonplan2 <- update(m7, .~. + scale(BIS_NONPLAN))
m_urgency2 <- update(m7, .~. + scale(urgency))
m_interpersonal2 <- update(m7, .~. + scale(IIP15INTAMBV))
summary(m_education2)
summary(m_income2)
summary(m_exit2)
summary(m_mmse2)
summary(m_nonplan2)
summary(m_urgency2)
summary(m_interpersonal2)
summary(m3)
m3_1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group5 + (1|ID), family = binomial, data = allData)
summary(m3)
summary(m3_1)
m3_1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group5 + (1|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
summary(m3_1)
summary(m3)
summary(m3_1)
# reference group = control
allData <- within(allData, group4 <- relevel(group4, ref = "control"))
allData <- within(allData, group5 <- relevel(group5, ref = "control"))
summary(m3)
m3 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + (1|ID), family = binomial, data = allData)
m3_1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group5 + (1|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
summary(m3)
summary(m3_1)
m3 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + (1|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
m3_1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group5 + (1|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
summary(m3)
summary(m3_1)
summary(m_income)
m_education <- update(m3, .~. + scale(EDUCATION))
m_income <- update(m3, .~. + scale(IncomePerCapita))
m_exit <- update(m3, .~. + scale(EXIT))
m_mmse <- update(m3, .~. + scale(MMSE))
m_nonplan <- update(m3, .~. + scale(BIS_NONPLAN))
m_urgency <- update(m3, .~. + scale(urgency))
m_interpersonal <- update(m3, .~. + scale(IIP15INTAMBV))
summary(m_education)
summary(m_income)
summary(m_exit)
summary(m_mmse)
summary(m_nonplan)
summary(m_urgency)
summary(m_interpersonal)
summary(m_education)
summary(m_income)
summary(m_exit)
summary(m_mmse)
summary(m_nonplan)
summary(m_mmse)
summary(m_urgency)
summary(m_interpersonal)
summary(m_education)
summary(m_income)
summary(m_exit)
summary(m_mmse)
summary(m_nonplan)
summary(m_urgency)
summary(m_interpersonal)
summary(m_nonplan)
summary(m2_3interaction1)
summary(m2_3interaction2)
summary(m5)
summary(m7)
summary(m_education2)
summary(m_income2)
summary(m_exit2)
summary(m_mmse2)
summary(m_nonplan2)
m_try <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + scale(BIS_NONPLAN) + (block | ID))
m_try <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + scale(BIS_NONPLAN) + (block | ID), data = allData, family = binomial, control = glmerControl(optimizer = "bobyqa"))
summary(m_try)
summary(m_nonplan2)
stargazer(m_try)
stargazer(m_try, type = "text")
stargazer(m_nonplan2, type = "text")
summary(m_exit2)
summary(m_nonplan2)
anova(m_nonplan, m_nonplan2)
summary(m9_4interaction)
m9_4interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * scale(totalStake) * Fairness_score * group4 + (block|ID), data = allData, family = binomial)
m9_4interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * scale(totalStake) * Fairness_score * group4 + (block|ID), data = allData, family = binomial, control = glmerControl(optimizer = "bobyqa"))
m9_4interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * scale(totalStake) * Fairness_score * group4 + (block|ID), data = allData, family = binomial)
m9_4interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * scale(totalStake) * Fairness_score * group4 + (block|ID), data = allData, family = binomial, glmerControl(calc.derivs = FALSE, optCtrl = list(maxfun = 2e4)))
m9_3interaction1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * Fairness_score * group4 + (block|ID), data = allData, family = binomial)
m9_3interaction1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * Fairness_score * group4 + (block|ID), data = allData, family = binomial, glmerControl(calc.derivs = FALSE, optCtrl = list(maxfun = 2e4)))
m9_3interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * scale(totalStake) * group4 + (block|ID), data = allData, family = binomial)
m9_3interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * scale(totalStake) * group4 + (block|ID), data = allData, family = binomial, glmerControl(calc.derivs = FALSE, optCtrl = list(maxfun = 2e4)))
summary(m9_3interaction)
summary(m9_3interaction)
m9_2interaction1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score * group4 + (block|ID), data = allData, family = binomial)
summary(m9_2interaction1)
m9_2interaction1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score * group4 + (block|ID), data = allData, family = binomial, glmerControl(calc.derivs = FALSE, optCtrl = list(maxfun = 2e4)))
summary(m9_2interaction1)
m9_2interaction2 <- glmer(allData$AcceptOffer ~ scale(totalStake) + Fairness_score + ReappraisalDirection * group4 + (block|ID), data = allData, family = binomial)s
m9_2interaction2 <- glmer(allData$AcceptOffer ~ scale(totalStake) + Fairness_score + ReappraisalDirection * group4 + (block|ID), data = allData, family = binomial)
summary(m9_2interaction2)
m9_2interaction2 <- glmer(allData$AcceptOffer ~ scale(totalStake) + Fairness_score + ReappraisalDirection * group4 + (block|ID), data = allData, family = binomial, control = glmerControl(optimizer = "bobyqa"))
summary(m9_2interaction2)
m9_2interaction3 <- glmer(allData$AcceptOffer ~ scale(totalStake) + ReappraisalDirection + Fairness_score  * group4 + (block|ID), data = allData, family = binomial, control = glmerControl(optimizer = "bobyqa"))
summary(m2_2interaction3)
m9_2interaction4 <- glmer(allData$AcceptOffer ~ scale(totalStake) + ReappraisalDirection + Fairness_score + group4 + scale(totalStake) * group4 + (block|ID), data = allData, family = binomial, control = glmerControl(optimizer = "bobyqa"))
summary(m2_2interaction4)
m9_2interaction5 <- glmer(allData$AcceptOffer ~ scale(totalStake) + ReappraisalDirection + Fairness_score + group4 + scale(totalStake) * Fairness_score + (block|ID), data = allData, family = binomial, control = glmerControl(optimizer = "bobyqa"))
summary(m2_2interaction5)
summary(m2_2interaction4)
summary(m2_2interaction5)
modellist2 <- model.sel(m9_3interaction, m9_2interaction1, m9_2interaction2, m9_2interaction3, m9_2interaction4, m9_2interaction5)
print(modellist2)
summary(m9_3interaction)
m_education3 <- update(m9_3interaction, .~. + scale(EDUCATION))
m_income3 <- update(m9_3interaction, .~. + scale(IncomePerCapita))
m_exit3 <- update(m9_3interaction, .~. + scale(EXIT))
m_mmse3 <- update(m9_3interaction, .~. + scale(MMSE))
m_nonplan3 <- update(m9_3interaction, .~. + scale(BIS_NONPLAN))
m_urgency3 <- update(m9_3interaction, .~. + scale(urgency))
m_interpersonal3 <- update(m9_3interaction, .~. + scale(IIP15INTAMBV))
summary(m_education3)
summary(m_income3)
summary(m_exit3)
summary(m_mmse3)
summary(m_nonplan3)
summary(m_urgency3)
summary(m_interpersonal3)
summary(m_education3)
summary(m_income3)
m_exit3 <- update(m9_3interaction, .~. + scale(EXIT))
summary(m_mmse3)
summary(m_nonplan3)
summary(m_urgency3)
summary(m_interpersonal3)
summary(m_exit3)
modellist3 <- model.sel(m_exit, m_exit2, m_exit2, m_exit3)
print(modellist3)
modellist3 <- model.sel(m_exit, m_exit1, m_exit2, m_exit3)
print(modellist3)
m4 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + EDUCATION + IncomePerCapita + EXIT + urgency + IIP15INTAMBV + 1|ID, data = allData, family = binomial)
m4 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + scale(EDUCATION) + scale(IncomePerCapita) + scale(EXIT) + scale(urgency) + scale(IIP15INTAMBV) + 1|ID, data = allData, family = binomial)
m4 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + scale(EDUCATION) + scale(IncomePerCapita) + scale(EXIT) + scale(urgency) + scale(IIP15INTAMBV) + 1|ID, data = allData, family = binomial, control = glmerControl(optimizer = "bobyqa"))
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
library(stargazer)
summary(m_exit3)
knitr::opts_chunk$set(cache = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
library(stargazer)
summary(m_education)
stargazer(m_income, type = "text")
stargazer(m_income, type = "text")
summary(m_education)
stargazer(m_income, type = "text")
summary(m_education)
summary(m_education)
stargazer(m_income, type = "text")
summary(m_education)
summary(m_education, correlation = FALSE)
stargazer(m_income, type = "text")
stargazer(m_income, type = "text")
summary(m_income, correlation = FALSE)
summary(m_education, correlation = FALSE)
summary(m_income, correlation = FALSE)
summary(m_exit, correlation = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
library(stargazer)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
#
#task <- read.csv("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_all_task_data.csv")
#demo <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_demog.xlsx")
#question <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
# reference group = control
allData <- within(allData, group4 <- relevel(group4, ref = "control"))
allData <- within(allData, group5 <- relevel(group5, ref = "control"))
# block number
allData$block <- NA
allData$block <- ifelse(allData$merged_trial < 27, "1", ifelse((allData$merged_trial > 26) & (allData$merged_trial < 53), "2", "3" ))
print(allData$block)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
#
#task <- read.csv("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_all_task_data.csv")
#demo <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_demog.xlsx")
#question <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
# reference group = control
allData <- within(allData, group4 <- relevel(group4, ref = "control"))
allData <- within(allData, group5 <- relevel(group5, ref = "control"))
# block number
allData$block <- NA
allData$block <- ifelse(allData$merged_trial < 27, "1", ifelse((allData$merged_trial > 26) & (allData$merged_trial < 53), "2", "3" ))
print(allData$block)
# complete missing values
# check how many percentage of data is missing in the question dataframe
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT', 'urgency')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
missingVar_complete <- complete(missingDF_impute,1)
# rename the columns with missing values
allData <- rename(allData, c("BIS_NONPLAN" = "BIS_NONPLAN_miss", "IIP15INTAMBV" = "IIP15INTAMBV_miss", "EXIT" = "EXIT_miss", "urgency" = "urgency_miss"))
# merge the generated values to the df
allData <- merge(allData, missingVar_complete, by = "ID")
View(allData)
print(allData$urgency_miss)
is.na(allData$EXIT_miss)
is.na(allData$EXIT)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
#
#task <- read.csv("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_all_task_data.csv")
#demo <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_demog.xlsx")
#question <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
# rename the columns with missing values
#allData <- rename(allData, c("BIS_NONPLAN" = "BIS_NONPLAN_miss", "IIP15INTAMBV" = "IIP15INTAMBV_miss", "EXIT" = "EXIT_miss", "urgency" = "urgency_"))
# reference group = control
allData <- within(allData, group4 <- relevel(group4, ref = "control"))
allData <- within(allData, group5 <- relevel(group5, ref = "control"))
# block number
allData$block <- NA
allData$block <- ifelse(allData$merged_trial < 27, "1", ifelse((allData$merged_trial > 26) & (allData$merged_trial < 53), "2", "3" ))
print(allData$block)
# complete missing values
# check how many percentage of data is missing in the question dataframe
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT', 'urgency')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
missingVar_complete <- complete(missingDF_impute,1)
# merge the generated values to the df
missingVar_complete <- rename(missingVar_complete, c("BIS_NONPLAN" = "BIS_NONPLAN_full", "IIP15INTAMBV" = "IIP15INTAMBV_full", "EXIT" = "EXIT_full", "urgency" = "urgency_full"))
allData <- merge(allData, missingVar_complete, by = "ID")
is.na(allData$EXIT)
is.na(allData$EXIT_full)
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
allData <- within(allData, group4 <- relevel(group4, ref = "control"))
allData <- within(allData, group5 <- relevel(group5, ref = "control"))
allData$block <- NA
allData$block <- ifelse(allData$merged_trial < 27, "1", ifelse((allData$merged_trial > 26) & (allData$merged_trial < 53), "2", "3" ))
print(allData$block)
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT', 'urgency')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
missingVar_complete <- complete(missingDF_impute, 1)
print(missingVar_complete)
is.na(allData$EXIT)
allData <- rename(allData, c("BIS_NONPLAN" = "BIS_NONPLAN_miss", "IIP15INTAMBV" = "IIP15INTAMBV_miss", "EXIT" = "EXIT_miss", "urgency" = "urgency_miss"))
is.na(allData$EXIT_miss)
allData <- merge(allData, missingVar_complete, by = "ID")
is.na(allData$EXIT)
is.na(allData$EXIT_miss)
is.na(allData$EXIT)
which (is.na(allData$EXIT))
which (is.na(allData$EXIT_miss))
# complete missing values
# check how many percentage of data is missing in the question dataframe
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT', 'urgency')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
missingVar_complete <- complete(missingDF_impute, 1)
# rename the columns with missing values in the original dataframe
allData <- rename(allData, c("BIS_NONPLAN" = "BIS_NONPLAN_miss", "IIP15INTAMBV" = "IIP15INTAMBV_miss", "EXIT" = "EXIT_miss", "urgency" = "urgency_miss"))
# merge the generated values to the df
allData <- merge(allData, missingVar_complete, by = "ID")
which(is.na(allData$EXIT))
corrMatrix <- ggpairs(demoQuestion[, c("PER CAPITA INCOME", "HRSD NO SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency")])
print(corrMatrix)
ggpairs(demoQuestion[, c("PER CAPITA INCOME", "HRSD NO SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency")])
m_exit <- update(m3, .~. + scale(EXIT))
m_nonplan <- update(m3, .~. + scale(BIS_NONPLAN))
m_interpersonal <- update(m3, .~. + scale(IIP15INTAMBV))
summary(m_exit, correlation = FALSE)
summary(m_interpersonal, correlation = FALSE)
summary(m_nonplan, correlation = FALSE)
m_exit1 <- update(m2_3interaction2, .~. + scale(EXIT))
m_exit1 <- update(m2_3interaction2, .~. + scale(EXIT))
m_nonplan1 <- update(m2_3interaction2, .~. + scale(BIS_NONPLAN))
m_interpersonal1 <- update(m2_3interaction2, .~. + scale(IIP15INTAMBV))
summary(m_exit1, correlation = FALSE)
summary(m_nonplan1, correlation = FALSE)
summary(m_interpersonal1, correlation = FALSE)
m_exit4 <- update(m2_2interaction2, .~. + scale(EXIT))
m_exit4 <- update(m2_2interaction2, .~. + scale(EXIT))
m_nonplan4 <- update(m2_2interaction2, .~. + scale(BIS_NONPLAN))
m_interpersonal4 <- update(m2_2interaction2, .~. + scale(IIP15INTAMBV))
m_exit4 <- update(m2_2interaction2, .~. + scale(EXIT))
summary(m_exit4, correlation = FALSE)
summary(m_nonplan4)
summary(m_interpersonal4)
m_exit2 <- update(m7, .~. + scale(EXIT))
m_exit2 <- update(m7, .~. + scale(EXIT))
m_nonplan2 <- update(m7, .~. + scale(BIS_NONPLAN))
m_interpersonal2 <- update(m7, .~. + scale(IIP15INTAMBV))
summary(m_nonplan2, correlation = FALSE)
summary(m_interpersonal2, correlation = FALSE)
summary(m_exit2, correlation = FALSE)
summary(m9_3interaction, correlation = FALSE)
summary(m9_2interaction1, correlation = FALSE)
summary(m9_2interaction2, correlation = FALSE)
summary(m9_2interaction3, correlation = FALSE)
summary(m9_2interaction5, correlation = FALSE)
m_exit3 <- update(m9_3interaction, .~. + scale(EXIT))
m_exit3 <- update(m9_3interaction, .~. + scale(EXIT))
m_nonplan3 <- update(m9_3interaction, .~. + scale(BIS_NONPLAN))
m_interpersonal3 <- update(m9_3interaction, .~. + scale(IIP15INTAMBV))
summary(m_exit3)
summary(m_nonplan3)
summary(m_interpersonal3)
knitr::opts_chunk$set(echo = FALSE, cache = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
library(stargazer)
ggpairs(demoQuestion[, c("PER CAPITA INCOME", "HRSD NO SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV")])
ggpairs(demoQuestion[, c("PER CAPITA INCOME", "HRSD NO SUI", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency")])
summary(m0)
m0 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + (1|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
summary(m0)
m0 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + (1|ID), family = binomial, data = allData)
stargazer(m2_2interaction2, type = "text")
stargazer(m0, type = "text")
stargazer(m_exit3, correlation = FALSE)
stargazer(m_education, correlation = FALSE, type = "text")
ggpairs(demoQuestion[, c("PER CAPITA INCOME", "HRSD NO SUI", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency")])
ICC_model <- function(modelName) {
tau_null <- as.numeric(lapply(stargazer(modelName)$varcor, diag))
sigma_null <- as.numeric(attr(stargazer(modelName)$varcor, "sc")^2)
ICC_null <- tau_null/(tau_null + sigma_null)
return(ICC_null)
}
cat("ICC is", ICC_model(randomInterceptOnly))
cat("ICC is", ICC_model(randomInterceptOnly))
randomInterceptOnly <- glmer(task$AcceptOffer ~ 1 + (1|id), data = task, family = binomial)
interceptOnly <- glm(task$AcceptOffer ~ 1, family = binomial, data = task)
stargazer(interceptOnly, type = "text")
randomInterceptOnly <- glmer(task$AcceptOffer ~ 1 + (1|id), data = task, family = binomial)
stargazer(randomInterceptOnly, type = "text")
ICC_model <- function(modelName) {
tau_null <- as.numeric(lapply(stargazer(modelName)$varcor, diag))
sigma_null <- as.numeric(attr(stargazer(modelName)$varcor, "sc")^2)
ICC_null <- tau_null/(tau_null + sigma_null)
return(ICC_null)
}
cat("ICC is", ICC_model(randomInterceptOnly))
stargazer(m_nonplan2, type = "text")
stargazer(m_nonplan3, type = "text")
