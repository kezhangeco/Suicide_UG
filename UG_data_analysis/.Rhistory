allData$
# compare with and without missing vars
bis <- missingVar_complete['BIS_NONPLAN'] - allData$BIS_NONPLAN
iip <- missingVar_complete$IIP15INTAMBV - allData$IIP15INTAMBV
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT')
missingDF <- allData[, missingVar]
apply(allData[missingVar], 2, pMiss)
print(md.pattern(allData[missingVar]))
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT')
missingDF <- allData[, missingVar]
apply(allData[missingVar], 2, pMiss)
print(md.pattern(allData[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
# block number
allData$framingContext <- NA
allData$framingContext[allData$ReappraisalDirection == "punish"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "empathy"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "baseline"] <- "baseline"
# check how many percentage of data is missing
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT')
missingDF <- allData[, missingVar]
apply(allData[missingVar], 2, pMiss)
print(md.pattern(allData[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
missingVar_complete <- complete(missingDF_impute,1)
# compare with and without missing vars
bis <- missingVar_complete$BIS_NONPLAN - allData$BIS_NONPLAN
iip <- missingVar_complete$IIP15INTAMBV - allData$IIP15INTAMBV
exit <- missingVar_complete$EXIT - allData$EXIT
print(bis)
print(iip)
print(exit)
print(summary(missngVar_complete))
print(missngVar_complete)
print(bis)
print(iip)
print(exit)
print(summary(missingDF_impute))
missingDF_impute$data
missingDF_impute$imp$BIS_NONPLAN
View(missingDF)
View(missingVar_complete)
View(missngVar_complete)
View(allData)
missingVar <- c('BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT')
missingDF <- question[, missingVar]
print(missingDF)
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
missingVar_complete <- complete(missingDF_impute,1)
missingVar_complete <- complete(missingDF_impute,1)
print(missingVar_complete)
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
print(missingDF_impute)
missingVar_complete <- complete(missingDF_impute,1)
print(missingVar_complete)
bis <- missingVar_complete$BIS_NONPLAN - question$BIS_NONPLAN
iip <- missingVar_complete$IIP15INTAMBV - question$IIP15INTAMBV
exit <- missingVar_complete$EXIT - question$EXIT
print(bis)
print(iip)
print(exit)
print(missingVar_complete)
missingVar_complete <- rename(missingVar_complete, c("BIS_NONPLAN" = "BIS_NONPLAN_full", "IIP15INTAMBV" = "IIP15INTAMBV_full", "EXIT" = "EXIT_full"))
allData <- merge(allData, missingVar_complete, by = "ID")
print(allData$IIP15INTAMBV_full)
print(allData$EXIT)
print(allData$EXIT_full)
print(allData$EXIT)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
# block number
allData$framingContext <- NA
allData$framingContext[allData$ReappraisalDirection == "punish"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "empathy"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "baseline"] <- "baseline"
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
missingVar_complete <- complete(missingDF_impute,1)
print(allData$EXIT)
print(missingVar_complete$EXIT)
print(allData$EXIT)
print(missingVar_complete$EXIT)
print(question$EXIT)
print(question$EXIT)
print(missingVar_complete$EXIT)
print(c(question$EXIT, missingVar_complete$EXIT))
df <- data.frame(question$EXIT, missingVar_complete$EXIT))
df <- data.frame(question$EXIT, missingVar_complete$EXIT)
print(df)
print(missingVar_complete)
allData <- merge(allData, missingVar_complete, by = "ID")
missingVar_complete <- rename(missingVar_complete, c("BIS_NONPLAN" = "BIS_NONPLAN_full", "IIP15INTAMBV" = "IIP15INTAMBV_full", "EXIT" = "EXIT_full"))
allData <- merge(allData, missingVar_complete, by = "ID")
print(allData$BIS_NONPLAN_full)
print(allData$framingContext)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
summary(m1_1)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE", "UPPS negative urgency" = "urgency"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
# block number
allData$framingContext <- NA
allData$framingContext[allData$ReappraisalDirection == "punish"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "empathy"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "baseline"] <- "baseline"
# check how many percentage of data is missing in the question dataframe
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
missingVar_complete <- complete(missingDF_impute,1)
# merge the generated values to the df
missingVar_complete <- rename(missingVar_complete, c("BIS_NONPLAN" = "BIS_NONPLAN_full", "IIP15INTAMBV" = "IIP15INTAMBV_full", "EXIT" = "EXIT_full"))
allData <- merge(allData, missingVar_complete, by = "ID")
glmer.glmulti <- function(formula, data, random = ""){
glmer(paste(deparse(formula), random), data = data, family = binomial, control = glmerControl(calc.derivs = FALSE))
}
m2_4interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirecmedtion * scale(totalStake) * Fairness_score * group4 + (1|ID), data = allData)
m2_4interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4 + (1|ID), data = allData)
corrMatrix <- ggpairs(demoQuestion[, c("IncomePerCapita", "HRSD NO SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency" )])
corrMatrix <- ggpairs(demoQuestion[, c("IncomePerCapita", "HRSD NO SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency" )])
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE", "UPPSP NEG URGENCY" = "urgency"))
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
corrMatrix <- ggpairs(demoQuestion[, c("IncomePerCapita", "HRSD NO SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency" )])
corrMatrix <- ggpairs(demoQuestion[, c("IncomePerCapita", "HRSD_NO_SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency" )])
corrMatrix <- ggpairs(demoQuestion[, c("`PER CAPITA INCOME`", "`HRSD NO SUI`", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency" )])
corrMatrix <- ggpairs(demoQuestion[, c("PER CAPITA INCOME", "HRSD NO SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency" )])
print(corrMatrix)
knitr::opts_chunk$set(cache = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(nlme)
library(readxl)
library(reshape2)
library(VIF)
library(numDeriv)
library(MuMIn)
library(HLMdiag)
library(DHARMa)
library(bitops)
library(nloptr)
library(optimx)
library(dfoptim)
library(emmeans)
library(afex)
library(usdm)
library(car)
library(glmulti)
library(rJava)
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
# block number
allData$framingContext <- NA
allData$framingContext[allData$ReappraisalDirection == "punish"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "empathy"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "baseline"] <- "baseline"
# check how many percentage of data is missing in the question dataframe
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT', 'urgency')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
missingVar_complete <- complete(missingDF_impute,1)
# merge the generated values to the df
missingVar_complete <- rename(missingVar_complete, c("BIS_NONPLAN" = "BIS_NONPLAN_full", "IIP15INTAMBV" = "IIP15INTAMBV_full", "EXIT" = "EXIT_full", "urgency" = "urgency_full"))
allData <- merge(allData, missingVar_complete, by = "ID")
outputs <- load("/Users/kezhang/Desktop/cedar/m2_4interaction.RData")
outputs <- load("m2_4interaction.RData")
summary(m2_4interaction)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
task <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv")
demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.factor(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
# block number
allData$framingContext <- NA
allData$framingContext[allData$ReappraisalDirection == "punish"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "empathy"] <- "framing"
allData$framingContext[allData$ReappraisalDirection == "baseline"] <- "baseline"
# check how many percentage of data is missing in the question dataframe
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT', 'urgency')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
missingVar_complete <- complete(missingDF_impute,1)
# merge the generated values to the df
missingVar_complete <- rename(missingVar_complete, c("BIS_NONPLAN" = "BIS_NONPLAN_full", "IIP15INTAMBV" = "IIP15INTAMBV_full", "EXIT" = "EXIT_full", "urgency" = "urgency_full"))
allData <- merge(allData, missingVar_complete, by = "ID")
m1 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score, level = 1, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData, confsetsize = 8)
m1_models <- weightable(m1)
m1_models <- m1_models[m1_models$aicc <= min(m1_models$aicc) + 2,]
m1_models <- weightable(m1)
m1_models <- m1_models[m1_models$aicc <= min(m1_models$aicc),]
print(m1_models)
m1_models <- weightable(m1)
print(m1_models)
m1 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
outputs <- load("m2_4interaction.RData")
summary(m2_4interaction)
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(ggplot2)
library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
library(glmulti)
library(rJava)
library(mice)
library(readxl)
library(VIF)
library(numDeriv)
library(MuMIn)
library(DHARMa)
library(bitops)
library(nloptr)
library(optimx)
library(dfoptim)
library(emmeans)
library(afex)
library(usdm)
library(broom)
m_education <- update(m3, .~. + scale(EDUCATION))
m3 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + (1|ID), family = binomial, data = allData)
summary(m3)
m3 <- all_fit(m3)
m3 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + (1|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
m_education <- update(m3, .~. + scale(EDUCATION))
m_income <- update(m3, .~. + scale(IncomePerCapita))
m_exit <- update(m3, .~. + scale(EXIT))
m_mmse <- update(m3, .~. + scale(MMSE))
m_nonplan <- update(m3, .~. + scale(BIS_NONPLAN))
m_urgency <- update(m3, .~. + scale(urgency))
m_interpersonal <- update(m3, .~. + scale(IIP15INTAMBV))
summary(m_exit)
summary(m_mmse)
summary(m_education)
summary(m_income)
summary(m_nonplan)
summary(m_urgency)
summary(m_interpersonal)
summary(m_exit)
summary(m_mmse)
summary(m_education)
summary(m_income)
summary(m_nonplan)
summary(m_urgency)
summary(m_interpersonal)
m2_models <- weightable(m2)
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
m2_models <- weightable(m2)
print(m2_models)
print(m2_1)
print(m2)
print(m2_models)
print(m2_models)
print(m2)
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", exclude = c("totalStake:Fairness_score") , method = "g", data = allData)
glmer.glmulti <- function(formula, data, random = ""){
glmer(paste(deparse(formula), random), data = data, family = binomial, control = glmerControl(calc.derivs = FALSE))
}
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", exclude = c("totalStake:Fairness_score") , method = "g", data = allData)
glmer.glmulti <- function(formula, data, random = ""){
glmer(paste(deparse(formula), random), data = data, family = binomial, exclude(c("totalStake:Fairness_score")), control = glmerControl(calc.derivs = FALSE))
}
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
glmer.glmulti <- function(formula, data, random = ""){
glmer(paste(deparse(formula), random), data = data, family = binomial, exclude = c("totalStake:Fairness_score"), control = glmerControl(calc.derivs = FALSE))
}
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
print(m2)
m2_best <- glmer(allData$AcceptOffer ~ ReappraisalDirection + Fairness_score + group4 + scale(totalStake) + ReappraisalDirection:scale(totalStake) + (1|ID), data = allData, family = binomial)
m2_best <- all_fit(m2_best)
anova(m2_best$bobyqa., m3)
glmer.glmulti <- function(formula, data, random = ""){
glmer(paste(deparse(formula), random), data = data, family = binomial, exclude = c("totalStake:Fairness_score"), control = glmerControl(calc.derivs = FALSE))
}
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
print(m2)
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "d", data = allData)
glmer.glmulti <- function(formula, data, random = ""){
glmer(paste(deparse(formula), random), data = data, family = binomial, control = glmerControl(calc.derivs = FALSE))
}
print(m2)
glmer.glmulti <- function(formula, data, random = ""){
glmer(paste(deparse(formula), random), data = data, family = binomial, control = glmerControl(calc.derivs = FALSE))
}
m2 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
print(m2)
m_fg <- glmulti(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
m_fg <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", family = binomial, data = allData)
m_fg <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score * group4, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", family = binomial, data = allData)
m_fg <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score * group4 + (1|ID), family = binomial, data = allData)
m_fg <- all_fit(m_fg)
m_fg <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score * group4 + (1|ID), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"))
summary(m_fg)
m2_sr <- m2_best
anova(m2_best$bobyqa., m3)
summary(m2_sr)
m2_sr <- m2_best$bobyqa.
summary(m2_sr)
m2_3interaction1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection * Fairness_score * group4 + (1|ID), data = allData, family = binomial, glmerControl(optCtrl = list(maxfun = 100000)))
m2_3interaction1 <- all_fit(m2_3interaction1)
m2_4interaction <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + group4 + ReappraisalDirection * scale(totalStake) * Fairness_score * group4 + (1|ID), data = allData, family = binomial, glmerControl(optCtrl = list(maxfun = 100000)))
print(m1_models)
m1_size <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "d", data = allData)
m1_models <- weightable(m1)
print(m1_models)
m1 <- glmulti(allData$AcceptOffer ~ ReappraisalDirection * scale(totalStake) * Fairness_score, level = 2, fitfunction = glmer.glmulti, random = "+ (1|ID)", method = "g", data = allData)
save.image("github.Rmd")
