save(list = ls(all.names = TRUE), file = "bandit2rt.RData")
knitr::opts_chunk$set(echo = TRUE)
library(lme4)
library(ggplot2)
# library(GGally)
library(plyr)
library(Matrix)
library(readxl)
library(reshape2)
library(numDeriv)
library(MuMIn)
# library(glmulti)
# library(rJava)
library(mice)
library(stargazer)
library(lsmeans)
library(effects)
library(psych)
library(compareGroups)
library(afex)
library(stargazer)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
#task <- read.csv("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_all_task_data.csv")
#demo <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_demog.xlsx")
#question <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_questionnaire.xlsx")
#,stringsAsFactors = FALSE
task <- read.csv('/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv')
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
#task <- read.csv("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_all_task_data.csv")
#demo <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_demog.xlsx")
#question <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_questionnaire.xlsx")
#,stringsAsFactors = FALSE
# task <- read.csv('/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv')
# demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
# question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
# emoRating <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
task <- read.csv("~/code/Suicide_UG/ug_all_task_data.csv")
demo <- read_excel("~/code/Suicide_UG/ug_demog.xlsx")
question <- read_excel("~/code/Suicide_UG/ug_questionnaire.xlsx")
emoRating <- read.csv("~/code/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
#task <- read.csv("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_all_task_data.csv")
#demo <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_demog.xlsx")
#question <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_questionnaire.xlsx")
#,stringsAsFactors = FALSE
# task <- read.csv('/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv')
# demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
# question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
# emoRating <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
task <- read.csv("~/code/Suicide_UG/ug_all_task_data.csv")
demo <- read_excel("~/code/Suicide_UG/ug_demog.xlsx")
question <- read_excel("~/code/Suicide_UG/ug_questionnaire.xlsx")
# emoRating <- read.csv("~/code/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
# compare the group differences
c1 <- demoQuestion[,c(2,3,15,49,93,129,78,79)]
myVar <- c("EDUCATION", "GENDERTEXT", "PROTECT2AGE", "RACETEXT", "MMSE TOTAL", "WTARSS", "DRS", "EXIT", "BIS_NONPLAN", "urgency", "IIP15INTAMBV")
c1_1 <- demoQuestion[myVar]
c2 <- compareGroups(c1,demoQuestion$group4)
c2_2 <- compareGroups(c1_1, demoQuestion$group4)
c2_3 <- compareGroups(c1_1, demoQuestion$group5)
t1 <- createTable(c2,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
t1_1 <- createTable(c2_2,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
t1_2 <- createTable(c2_3,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.numeric(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
allData$Trial_Number <- as.factor(allData$Trial_Number)
allData$group4 <- as.factor(allData$group4)
allData$group5 <- as.factor(allData$group5)
# reference group = control
allData <- within(allData, group4 <- relevel(group4, ref = "attempter"))
allData <- within(allData, group5 <- relevel(group5, ref = "AttempterHL"))
# block number
allData$block <- NA
allData$block <- ifelse(allData$merged_trial < 27, "1", ifelse((allData$merged_trial > 26) & (allData$merged_trial < 53), "2", "3" ))
# fairness ratio
allData$fairLR <- log(allData$PlayerProposedAmount/allData$OpponentProposedAmount)
allData$fairR <- (allData$PlayerProposedAmount/allData$OpponentProposedAmount)
# separate groups
depression <- subset(allData, group4 == "depression")
control <- subset(allData, group4 == "control")
ideator <- subset(allData, group4 == "ideator")
attempter <- subset(allData, group4 == "attempter")
attHL <- subset(allData, group4 == "AttempterHL")
attLL <- subset(allData, group4 == "AttempterLL")
# merge individual variables in the post survey df
Pgroup <- demo[,c("ID", "group4", "group5")]
emoRating <- merge(emoRating, Pgroup, by = "ID")
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
#task <- read.csv("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_all_task_data.csv")
#demo <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_demog.xlsx")
#question <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_questionnaire.xlsx")
#,stringsAsFactors = FALSE
# task <- read.csv('/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv')
# demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
# question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
# emoRating <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
task <- read.csv("~/code/Suicide_UG/ug_all_task_data.csv")
demo <- read_excel("~/code/Suicide_UG/ug_demog.xlsx")
question <- read_excel("~/code/Suicide_UG/ug_questionnaire.xlsx")
# emoRating <- read.csv("~/code/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
# compare the group differences
c1 <- demoQuestion[,c(2,3,15,49,93,129,78,79)]
myVar <- c("EDUCATION", "GENDERTEXT", "PROTECT2AGE", "RACETEXT", "MMSE TOTAL", "WTARSS", "DRS", "EXIT", "BIS_NONPLAN", "urgency", "IIP15INTAMBV")
c1_1 <- demoQuestion[myVar]
c2 <- compareGroups(c1,demoQuestion$group4)
c2_2 <- compareGroups(c1_1, demoQuestion$group4)
c2_3 <- compareGroups(c1_1, demoQuestion$group5)
t1 <- createTable(c2,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
t1_1 <- createTable(c2_2,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
t1_2 <- createTable(c2_3,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.numeric(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
allData$Trial_Number <- as.factor(allData$Trial_Number)
allData$group4 <- as.factor(allData$group4)
allData$group5 <- as.factor(allData$group5)
# reference group = control
allData <- within(allData, group4 <- relevel(group4, ref = "attempter"))
allData <- within(allData, group5 <- relevel(group5, ref = "AttempterHL"))
# block number
allData$block <- NA
allData$block <- ifelse(allData$merged_trial < 27, "1", ifelse((allData$merged_trial > 26) & (allData$merged_trial < 53), "2", "3" ))
# fairness ratio
allData$fairLR <- log(allData$PlayerProposedAmount/allData$OpponentProposedAmount)
allData$fairR <- (allData$PlayerProposedAmount/allData$OpponentProposedAmount)
# separate groups
depression <- subset(allData, group4 == "depression")
control <- subset(allData, group4 == "control")
ideator <- subset(allData, group4 == "ideator")
attempter <- subset(allData, group4 == "attempter")
attHL <- subset(allData, group4 == "AttempterHL")
attLL <- subset(allData, group4 == "AttempterLL")
# merge individual variables in the post survey df
Pgroup <- demo[,c("ID", "group4", "group5")]
# emoRating <- merge(emoRating, Pgroup, by = "ID")
emoRating$ID <- as.factor(emoRating$ID)
# import data
#task <- read.csv("/home/kzhang5/scratch/ug_all_task_data.csv")
#demo <- read_excel("/home/kzhang5/scratch/ug_demog.xlsx")
#question <- read_excel("/home/kzhang5/scratch/ug_questionnaire.xlsx")
#task <- read.csv("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_all_task_data.csv")
#demo <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_demog.xlsx")
#question <- read_excel("C:\\Users\\ke\\ownCloud\\Suicide_UG\\UG_clean_updated\\ug_questionnaire.xlsx")
#,stringsAsFactors = FALSE
# task <- read.csv('/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_all_task_data.csv')
# demo <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_demog.xlsx")
# question <- read_excel("/Users/kezhang/ownCloud/Suicide_UG/UG_clean_updated/ug_questionnaire.xlsx")
# emoRating <- read.csv("/Users/kezhang/ownCloud/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
task <- read.csv("~/code/Suicide_UG/ug_all_task_data.csv")
demo <- read_excel("~/code/Suicide_UG/ug_demog.xlsx")
question <- read_excel("~/code/Suicide_UG/ug_questionnaire.xlsx")
# emoRating <- read.csv("~/code/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
question <- rename(question, c("UPPSP NEG URGENCY" = "urgency"))
demoQuestion <- merge(demo, question, on = "ID")
# compare the group differences
c1 <- demoQuestion[,c(2,3,15,49,93,129,78,79)]
myVar <- c("EDUCATION", "GENDERTEXT", "PROTECT2AGE", "RACETEXT", "MMSE TOTAL", "WTARSS", "DRS", "EXIT", "BIS_NONPLAN", "urgency", "IIP15INTAMBV")
c1_1 <- demoQuestion[myVar]
c2 <- compareGroups(c1,demoQuestion$group4)
c2_2 <- compareGroups(c1_1, demoQuestion$group4)
c2_3 <- compareGroups(c1_1, demoQuestion$group5)
t1 <- createTable(c2,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
t1_1 <- createTable(c2_2,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
t1_2 <- createTable(c2_3,hide = NA, hide.no = 0, digits = 1, show.n = TRUE)
allData <- merge(task, demoQuestion, on = "ID")
allData$totalStake <- allData$PlayerProposedAmount + allData$OpponentProposedAmount
allData <- rename(allData, c("HOUSEHOLD INCOME" = "HouseholdIncome", "HRSD NO SUI" = "HRSD_NO_SUI", "PER CAPITA INCOME" = "IncomePerCapita", "MMSE TOTAL" = "MMSE"))
allData$Fairness_score <- as.numeric(allData$Fairness_score)
allData$ID <- as.factor(allData$ID)
allData$AcceptOffer <- as.factor(allData$AcceptOffer)
allData$Trial_Number <- as.factor(allData$Trial_Number)
allData$group4 <- as.factor(allData$group4)
allData$group5 <- as.factor(allData$group5)
# reference group = control
allData <- within(allData, group4 <- relevel(group4, ref = "attempter"))
allData <- within(allData, group5 <- relevel(group5, ref = "AttempterHL"))
# block number
allData$block <- NA
allData$block <- ifelse(allData$merged_trial < 27, "1", ifelse((allData$merged_trial > 26) & (allData$merged_trial < 53), "2", "3" ))
# fairness ratio
allData$fairLR <- log(allData$PlayerProposedAmount/allData$OpponentProposedAmount)
allData$fairR <- (allData$PlayerProposedAmount/allData$OpponentProposedAmount)
# separate groups
depression <- subset(allData, group4 == "depression")
control <- subset(allData, group4 == "control")
ideator <- subset(allData, group4 == "ideator")
attempter <- subset(allData, group4 == "attempter")
attHL <- subset(allData, group4 == "AttempterHL")
attLL <- subset(allData, group4 == "AttempterLL")
# merge individual variables in the post survey df
Pgroup <- demo[,c("ID", "group4", "group5")]
# emoRating <- merge(emoRating, Pgroup, by = "ID")
# emoRating$ID <- as.factor(emoRating$ID)
# emoRating$group4 <- as.factor(emoRating$group4)
# emoRating$group5 <- as.factor(emoRating$group5)
Pvars <- allData[, c("ID", "MMSE", "PROTECT2AGE", "GENDERTEXT", "IncomePerCapita", "HRSD_NO_SUI", "EDUCATION", "RACETEXT", "WTARSS", "DRS", "EXIT", "BIS_NONPLAN", "urgency", "IIP15INTAMBV", "IIP15INTSEN", "IIP15AGRESS", "IRI_EMPATHETIC_CONCERN")]
Pvars <- subset(Pvars, !duplicated(ID))
# emoRating <- merge(emoRating, Pvars, by = "ID")
# emoRating$ReappraisalDirection[emoRating$ReappraisalDirection == 1] <- "punish"
# emoRating$ReappraisalDirection[emoRating$ReappraisalDirection == 2] <- "empathy"
# emoRating$ReappraisalDirection <- as.factor(emoRating$ReappraisalDirection)
#
#fairPercept <- subset(AvgEmoRating, AvgEmoRating$ReappraisalDirection == "unfair")
#allData <- merge(allData, fairPercept, by="ID")
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT', 'urgency')
# complete missing values
# check how many percentage of data is missing in the question dataframe
pMiss <- function(x){sum(is.na(x))/length(x)*100}
missingVar <- c('ID', 'BIS_NONPLAN', 'IIP15INTAMBV', 'EXIT', 'urgency')
missingDF <- question[, missingVar]
apply(question[missingVar], 2, pMiss)
print(md.pattern(question[missingVar]))
# impute data
missingDF_impute <- mice(missingDF, m = 5, meth = "pmm", maxit = 50)
print(summary(missingDF_impute))
missingVar_complete <- complete(missingDF_impute,1)
# merge the generated values to the df
missingVar_complete <- rename(missingVar_complete, c("BIS_NONPLAN" = "BIS_NONPLAN_full", "IIP15INTAMBV" = "IIP15INTAMBV_full", "EXIT" = "EXIT_full", "urgency" = "urgency_full"))
allData <- merge(allData, missingVar_complete, by = "ID")
df <- allData
corrMatrix <- ggpairs(demoQuestion[, c("PER CAPITA INCOME", "HRSD NO SUI", "DRS", "EDUCATION", "EXIT", "BIS_NONPLAN", "IIP15INTAMBV", "urgency")])
m0 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + Fairness_score + (1|ID/block), family = binomial, data = allData,
control = glmerControl(optimizer = "bobyqa"))
summary(m0)
plot(df$Fairness_score, df$fairLR)
m0r <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + fairLR + (1|ID/block), family = binomial, data = allData,
control = glmerControl(optimizer = "bobyqa"))
summary(m0r)
car::Anova(m0r)
anova(m0,m0r)
lsm <- lsmeans(m0r, "ReappraisalDirection")
plot(lsm, horiz = F)
plot(Effect("totalStake",m0r), axes = list(y=list(lab = "P(accept)", type = "response", lim = c(0,1))), multiline = TRUE, rug = FALSE)
plot(Effect("fairLR",m0r), axes = list(y=list(lab = "P(accept)", type = "response", lim = c(0,1))), multiline = TRUE, rug = FALSE)
m1 <- glmer(allData$AcceptOffer ~ ReappraisalDirection*fairLR*scale(totalStake) + (1|ID/block), family = binomial, data =
allData, control = glmerControl(optimizer = "bobyqa"))
summary(m1)
car::Anova(m1)
anova(m0r,m1)
lsm <- lsmeans(m1, "ReappraisalDirection", by = "totalStake", at = list(totalStake = c(8, 13,18)))
plot(lsm, horiz = F)
lsm <- lsmeans(m1, "fairLR", by = "totalStake", at = list(totalStake = c(8, 13,18), fairLR = c(-2.66,-1.22,0.22)))
plot(lsm, horiz = F)
lsm <- lsmeans(m1, "ReappraisalDirection", by = "totalStake", at = list(totalStake = c(8, 13,18)))
# 4 way interaction: ReappraisalDirection * scale(fairLR) * scale(totalStake) * group. Too complex to converge.
#m1_4way <- glmer(allData$AcceptOffer ~ ReappraisalDirection * scale(fairLR) * scale(totalStake) * group4 +  (1 | ID/block), family = binomial, data = allData, control = glmerControl(optimizer = "bobyqa"), optCtrl = list(maxfun = 2e4))
# Group interaction
m1g <-glmer(
allData$AcceptOffer ~ ReappraisalDirection * scale(fairLR) * scale(totalStake) + ReappraisalDirection *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = allData,
control = glmerControl(optimizer = "bobyqa"))
stargazer(m1g, type = "text", title = "AcceptOffer ~ ReappraisalDirection * scale(fairLR) * scale(totalStake) + ReappraisalDirection * group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block)", out = "/Volumes/LAB/Suicide_UG/UG_data_analysis/outputs/main/group4Interaction.txt")
car::Anova(m1g)
anova(m1,m1g)
m1g_cens <- glmer(
AcceptOffer ~ ReappraisalDirection * scale(fairLR) * scale(totalStake) + ReappraisalDirection *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 |
ID/block),
family = binomial,
data = allData[allData$Stimuli_RT<5823,],
control = glmerControl(optimizer = "bobyqa"))
m1g_cens <- glmer(
AcceptOffer ~ ReappraisalDirection * scale(fairLR) * scale(totalStake) + ReappraisalDirection *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 |
ID/block),
family = binomial,
data = allData[allData$Stimuli_RT<5823,],
control = glmerControl(optimizer = "bobyqa"))
# Punishing type has two type
punishMaster <- subset(allData, (allData$PunishingType == "reputation") | (allData$PunishingType == "resources"))
punishMaster$PunishingType <- factor(punishMaster$PunishingType)
levels(punishMaster$PunishingType) <- c("reputation", "resources")
unique(punishMaster$PunishingType)
# dataframe with 3 types: resources, reputation , empathy
punishMasterAll <- allData
punishMasterAll$PunishingType[punishMasterAll$PunishingType == "na"] <- "empathy"
#punishMasterAll <- subset(punishMasterAll, (punishMasterAll$PunishingType == "reputation") | (punishMasterAll$PunishingType == "resources") | (punishMasterAll$PunishingType == "empathy"))
punishMasterAll <- subset(punishMasterAll, PunishingType %in% c("reputation", "resources", "empathy"))
punishMasterAll$PunishingType <- as.factor(punishMasterAll$PunishingType)
levels(punishMasterAll$PunishingType) <- c("reputation", "resources", "empathy")
levels(punishMasterAll$PunishingType)
(punishMasterAll$PunishingType)
table(punishMasterAll$PunishingType)
names(allData)
View(allData)
allData$ReappraisalDirectionResourcesRep <- allData$PunishingType
emoRating <- read.csv("~/code/Suicide_UG/raw_data_backup/post_survey_master_data_frame.csv")
emoRating <- read.csv("~/code/Suicide_UG/post_survey_master_data_frame.csv")
emoRating <- read.csv("~/code/Suicide_UG/UG_data_analysis/post_survey_master_data_frame.csv")
emoRating <- merge(emoRating, Pgroup, by = "ID")
emoRating$ID <- as.factor(emoRating$ID)
emoRating$group4 <- as.factor(emoRating$group4)
emoRating$group5 <- as.factor(emoRating$group5)
emoRating <- merge(emoRating, Pvars, by = "ID")
emoRating$ReappraisalDirection[emoRating$ReappraisalDirection == 1] <- "punish"
emoRating$ReappraisalDirection[emoRating$ReappraisalDirection == 2] <- "empathy"
emoRating$ReappraisalDirection <- as.factor(emoRating$ReappraisalDirection)
fairPercept <- subset(AvgEmoRating, AvgEmoRating$ReappraisalDirection == "unfair")
allData$ReappraisalDirectionResourcesRep <- allData$PunishingType
punishMaster <- subset(allData, (allData$PunishingType == "reputation") | (allData$PunishingType == "resources"))
punishMaster$PunishingType <- factor(punishMaster$PunishingType)
levels(punishMaster$PunishingType) <- c("reputation", "resources")
unique(punishMaster$PunishingType)
punishMasterAll <- allData
punishMasterAll$PunishingType[punishMasterAll$PunishingType == "na"] <- "empathy"
punishMasterAll <- subset(punishMasterAll, PunishingType %in% c("reputation", "resources", "empathy"))
punishMasterAll$PunishingType <- as.factor(punishMasterAll$PunishingType)
levels(punishMasterAll$PunishingType) <- c("reputation", "resources", "empathy")
punishMaster <- subset(punishMasterAll, (punishMasterAll$PunishingType == "reputation") | (punishMasterAll$PunishingType == "resources"))
unique(punishMasterAll$PunishingType)
unique(punishMaster$PunishingType)
punishMasterAll <- allData
punishMasterAll <- subset(punishMasterAll, punishMasterAll$PunishingType!="baseline")
punishMasterAll$PunishingType <- as.character(punishMasterAll$PunishingType)
punishMasterAll$PunishingType[punishMasterAll$PunishingType == "na"] <- "empathy"
punishMasterAll$PunishingType <- factor(punishMasterAll$PunishingType)
levels(punishMasterAll$PunishingType) <- c("reputation", "resources", "empathy")
punishMaster <- subset(punishMasterAll, punishMasterAll$PunishingType != "empathy")
punishMaster$PunishingType <- factor(punishMaster$PunishingType)
unique(punishMaster$PunishingType)
unique(punishMasterAll$PunishingType)
modelPun1_fairScore <- glmer(punishMaster$AcceptOffer ~ PunishingType + scale(totalStake) +
scale(Fairness_score) + (1|ID/block),
family = binomial, data = punishMaster,
control = glmerControl(optimizer = "bobyqa"))
modelPun1_fairLR <- glmer(punishMaster$AcceptOffer ~ PunishingType + scale(totalStake) +
scale(fairLR) + (1|ID/block),
family = binomial, data = punishMaster,
control = glmerControl(optimizer = "bobyqa"))
car::Anova(modelPun1_fairScore)
anova(modelPun1_fairScore,modelPun1_fairLR)
lsm <- lsmeans(modelPun1_fairLR, "PunishingType")
plot(lsm, horiz = F)
plot(Effect("totalStake",modelPun1_fairLR), axes = list(y=list(lab = "P(accept)", type = "response", lim = c(0,1))), multiline = TRUE, rug = FALSE)
plot(Effect("fairLR",modelPun1_fairLR), axes = list(y=list(lab = "P(accept)", type = "response", lim = c(0,1))), multiline = TRUE, rug = FALSE)
lsm <- lsmeans(modelPun1_fairLR, "PunishingType")
plot(lsm, horiz = F)
modelPun1gAll <-glmer(
AcceptOffer ~ PunishingType * scale(fairLR) * scale(totalStake) + PunishingType *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = punishMasterAll,
control = glmerControl(optimizer = "bobyqa"))
summary(modelPun1gAll)
lsm <- lsmeans(modelPun1gAll, "group4")
plot(lsm, horiz = F)
lsm <- lsmeans(modelPun1gAll, "PunishingType", by = "group4")
plot(lsm, horiz = F)+
theme(axis.text.x=element_text(angle=90, hjust=1)) +
facet_grid(~ group4)
plot(lsm, horiz = F)
m1gPun <-glmer(
allData$AcceptOffer ~ ReappraisalDirectionResourcesRep * scale(fairLR) * scale(totalStake) + ReappraisalDirection *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = allData,
control = glmerControl(optimizer = "bobyqa"))
m1gPun <-glmer(
allData$AcceptOffer ~ ReappraisalDirectionResourcesRep * scale(fairLR) * scale(totalStake) + ReappraisalDirectionResourcesRep *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = allData,
control = glmerControl(optimizer = "bobyqa"))
m1gPun <-glmer(
allData$AcceptOffer ~ ReappraisalDirectionResourcesRep * scale(fairLR) * scale(totalStake) + ReappraisalDirectionResourcesRep *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = allData,
control=glmerControl(optCtrl=list(maxfun=1e5)))
m1gPun <-glmer(
allData$AcceptOffer ~ scale(fairLR) * scale(totalStake) + ReappraisalDirectionResourcesRep * scale(fairLR) + ReappraisalDirectionResourcesRep * scale(totalStake) + ReappraisalDirectionResourcesRep *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = allData,
control=glmerControl(optCtrl=list(maxfun=1e5)))
summary(m1gPun)
car::Anova(m1gPun)
m1gPun <-glmer(
allData$AcceptOffer ~ ReappraisalDirectionResourcesRep * scale(fairLR) + ReappraisalDirectionResourcesRep * scale(totalStake) + ReappraisalDirectionResourcesRep *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = allData,
control=glmerControl(optCtrl=list(maxfun=1e5)))
allData$ReappraisalDirectionResourcesRep <- allData$PunishingType
allData$ReappraisalDirectionResourcesRep[allData$ReappraisalDirectionResourcesRep=='na'] <- 'empathy'
table(allData$ReappraisalDirectionResourcesRep)
table(allData$ReappraisalDirection)
allData$ReappraisalDirectionResourcesRep[allData$ReappraisalDirectionResourcesRep=='na'] <- 'empathy'
levels(allData$ReappraisalDirectionResourcesRep)
?recode
dplyr::recode(allData$ReappraisalDirectionResourcesRep, na = 'empathy')
dplyr::recode(allData$ReappraisalDirectionResourcesRep, `na` = 'empathy')
dplyr::recode(allData$ReappraisalDirectionResourcesRep, 'na' = 'empathy')
is.na(ReappraisalDirectionResourcesRep)
is.na(allData$ReappraisalDirectionResourcesRep)
dplyr::recode(allData$ReappraisalDirectionResourcesRep, NA = 'empathy')
dplyr::recode(allData$ReappraisalDirectionResourcesRep, 'NA' = 'empathy')
allData$ReappraisalDirectionResourcesRep[is.na(allData$ReappraisalDirectionResourcesRep)] <- 'empathy'
allData$ReappraisalDirectionResourcesRep <- allData$PunishingType
allData$ReappraisalDirectionResourcesRep[is.na(allData$ReappraisalDirectionResourcesRep)] <- allData$ReappraisalDirection
allData$ReappraisalDirectionResourcesRep <- as.character(allData$PunishingType)
allData$ReappraisalDirectionResourcesRep <- as.character(allData$PunishingType)
allData$ReappraisalDirectionResourcesRep[is.na(allData$ReappraisalDirectionResourcesRep)] <- allData$ReappraisalDirection
allData$ReappraisalDirectionResourcesRep
dplyr::recode(allData$ReappraisalDirectionResourcesRep, 'NA' = 'empathy')
dplyr::recode(allData$ReappraisalDirectionResourcesRep, na = 'empathy')
allData$ReappraisalDirectionResourcesRep <- as.character(allData$PunishingType)
allData$ReappraisalDirectionResourcesRep <- as.factor(dplyr::recode(allData$ReappraisalDirectionResourcesRep, na = 'empathy'))
allData$ReappraisalDirectionResourcesRep
m1gPun <-glmer(
allData$AcceptOffer ~ ReappraisalDirectionResourcesRep * scale(fairLR) + ReappraisalDirectionResourcesRep * scale(totalStake) + ReappraisalDirectionResourcesRep *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = allData,
control=glmerControl(optCtrl=list(maxfun=1e5)))
m1gPun <-glmer(
allData$AcceptOffer ~ ReappraisalDirectionResourcesRep * scale(fairLR) + ReappraisalDirectionResourcesRep * scale(totalStake) + ReappraisalDirectionResourcesRep *
group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block),
family = binomial,
data = allData,
control=glmerControl(optCtrl=list(maxfun=1e5)))
stargazer(m1gPun, type = "text", title = "AcceptOffer ~ ReappraisalDirection * scale(fairLR) * scale(totalStake) + ReappraisalDirection * group4 + scale(fairLR) * group4 + scale(totalStake) * group4 +  (1 | ID/block)", out = "~/code/Suicide_UG/UG_data_analysis/outputs/main/group4InteractionPun.txt")
car::Anova(m1gPun)
anova(m1g,m1gPun)
lsm <- lsmeans::lsmeans(m1gPun, "ReappraisalDirectionResourcesRep", by = "group4")
plot(lsm, horiz = F)
punish <- subset(emoRating, emoRating$ReappraisalDirection == "punish")
empathy <- subset(emoRating, emoRating$ReappraisalDirection == "empathy")
boxplot(punish$Rating ~ punish$group5, title = "reactivity under punishment")
ano5_punish <-aov(punish$Rating ~ punish$group5)
summary(ano5_punish)
tk5_punish <- TukeyHSD(ano5_punish)
print(tk5_punish)
boxplot(empathy$Rating ~ empathy$group5, title = "reactivity under empathy")
ano5_empathy <-aov(empathy$Rating ~ empathy$group5)
summary(ano5_empathy)
tk5_empathy <- TukeyHSD(ano5_empathy)
boxplot(punish$Rating ~ punish$group4, title = "reactivity under punishment")
ano4_punish <-aov(punish$Rating ~ punish$group4)
summary(ano4_punish)
tk4_punish <- TukeyHSD(ano4_punish)
print(tk4_punish)
boxplot(empathy$Rating ~ empathy$group4, title = "reactivity under empathy")
ano4_empathy <-aov(empathy$Rating ~ empathy$group4)
summary(ano4_empathy)
tk4_empathy <- TukeyHSD(ano4_empathy)
print(tk4_empathy)
m0ER4 <- glmer(allData$AcceptOffer ~ ReappraisalDirection + scale(totalStake) + fairLR + reactivity + group4 + (1|ID/block), family = binomial, data = allData,
control = glmerControl(optimizer = "bobyqa"))
m2React4 <- lmer(
scale(Rating) ~ ReappraisalDirection + group4 + (1|ID), data = emoRating)
jpeg('/Volumes/LAB/Suicide_UG/UG_data_analysis/outputs/rating=group4Reappraisal.jpg')
lsm <- lsmeans(m2React4, "ReappraisalDirection", by = c("group4"))
plot(lsm, horiz = F) +
facet_grid(. ~ group4)
dev.off()
plot(lsm, horiz = F)
levels(punishMaster$PunishingType
)
levels(punishMasterAll)
levels(punishMasterAll$PunishingType)
unique(punishMasterAll$PunishingType)
contrasts(punishMasterAll$PunishingType)
levels(allData$ReappraisalDirectionResourcesRep)
unique(allData$ReappraisalDirectionResourcesRep)
contrasts(allData$ReappraisalDirectionResourcesRep)
getwd()
setwd('~/code/Suicide_UG/')
pdf(filename = "group4ResourcesReputation.pdf", width=8, height=5)
pdf("group4ResourcesReputation.pdf", width=8, height=5)
lsm <- lsmeans::lsmeans(m1gPun, "ReappraisalDirectionResourcesRep", by = "group4")
plot(lsm, horiz = F)
dev.off()
pdf("group4ResourcesReputation.pdf", width=8, height=5)
lsm <- lsmeans::lsmeans(m1gPun, "ReappraisalDirectionResourcesRep", by = "group4")
print(plot(lsm, horiz = F))
dev.off()
pdf("group4ResourcesReputation.pdf", width=8, height=5)
lsm <- lsmeans::lsmeans(m1gPun, "ReappraisalDirectionResourcesRep", by = "group4")
plot(lsm, horiz = F)
dev.off()
dev.cur()
pdf("group4ResourcesReputation.pdf", width=8, height=5)
lsm <- lsmeans::lsmeans(m1gPun, "ReappraisalDirectionResourcesRep", by = "group4")
plot(lsm, horiz = F)
while (!is.null(dev.list()))  dev.off()
getwd()
